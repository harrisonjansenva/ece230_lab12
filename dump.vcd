$date
	Tue Apr  8 21:09:09 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module test $end
$var wire 1 ! z_onehot $end
$var wire 1 " z_binary $end
$var wire 5 # onehot_actual [4:0] $end
$var wire 3 $ binary_actual [2:0] $end
$var reg 1 % clk $end
$var reg 1 & reset $end
$var reg 1 ' w $end
$scope module uut $end
$var wire 1 % btnC $end
$var wire 1 & btnU $end
$var wire 1 ' sw $end
$var wire 10 ( led [9:0] $end
$scope module binarymod $end
$var wire 1 % clk $end
$var wire 1 & reset $end
$var wire 1 ' w $end
$var wire 1 ) z $end
$var wire 3 * state [2:0] $end
$var wire 3 + next [2:0] $end
$scope module bone $end
$var wire 1 , D $end
$var wire 1 - Default $end
$var wire 1 % clk $end
$var wire 1 & reset $end
$var reg 1 . Q $end
$upscope $end
$scope module btwo $end
$var wire 1 / D $end
$var wire 1 0 Default $end
$var wire 1 % clk $end
$var wire 1 & reset $end
$var reg 1 1 Q $end
$upscope $end
$scope module bzero $end
$var wire 1 2 D $end
$var wire 1 3 Default $end
$var wire 1 % clk $end
$var wire 1 & reset $end
$var reg 1 4 Q $end
$upscope $end
$upscope $end
$scope module onehotmod $end
$var wire 1 5 Anext $end
$var wire 1 6 Bnext $end
$var wire 1 7 Cnext $end
$var wire 1 8 Dnext $end
$var wire 1 9 Enext $end
$var wire 1 % clk $end
$var wire 1 & reset $end
$var wire 1 ' w $end
$var wire 1 : z $end
$var wire 5 ; state [4:0] $end
$scope module A $end
$var wire 1 5 D $end
$var wire 1 < Default $end
$var wire 1 % clk $end
$var wire 1 & reset $end
$var reg 1 = Q $end
$upscope $end
$scope module B $end
$var wire 1 6 D $end
$var wire 1 > Default $end
$var wire 1 % clk $end
$var wire 1 & reset $end
$var reg 1 ? Q $end
$upscope $end
$scope module C $end
$var wire 1 7 D $end
$var wire 1 @ Default $end
$var wire 1 % clk $end
$var wire 1 & reset $end
$var reg 1 A Q $end
$upscope $end
$scope module D $end
$var wire 1 8 D $end
$var wire 1 B Default $end
$var wire 1 % clk $end
$var wire 1 & reset $end
$var reg 1 C Q $end
$upscope $end
$scope module E $end
$var wire 1 9 D $end
$var wire 1 D Default $end
$var wire 1 % clk $end
$var wire 1 & reset $end
$var reg 1 E Q $end
$upscope $end
$upscope $end
$upscope $end
$scope task check_state $end
$upscope $end
$scope task check_state_bn $end
$upscope $end
$scope task check_state_oh $end
$upscope $end
$scope task do_reset $end
$upscope $end
$scope task next_state $end
$upscope $end
$scope task toggle_clock $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
0E
0D
0C
0B
0A
0@
0?
0>
1=
1<
b1 ;
0:
09
08
07
16
05
04
03
12
01
00
0/
0.
0-
0,
b1 +
b0 *
0)
b100 (
0'
x&
0%
b0 $
b1 #
0"
0!
$end
#1
1&
#2
0&
#3
02
1,
b10 +
06
17
b1 $
b10 #
b1 *
14
1?
b10001000 (
b10 ;
0=
1%
#4
0%
#5
1!
1:
1"
b100 #
1)
b10 $
0?
b100 ;
1A
04
b100010011 (
b10 *
1.
1%
#6
0%
#7
1%
#8
12
07
b11 +
18
1'
0%
#9
0,
02
1/
b100 +
0!
08
19
0:
0"
b1000 #
0)
b11 $
0A
b1000 ;
1C
b110100000 (
b11 *
14
1%
#10
0%
#11
1!
1"
1:
1)
b100 $
b10000 #
11
0.
b100 *
04
1E
b1001000011 (
b10000 ;
0C
1%
#12
0%
#13
1%
#14
12
0/
16
b1 +
09
0'
0%
#15
02
1,
b10 +
0!
06
17
0"
0:
0)
b1 $
b10 #
01
b1 *
14
0E
b10001000 (
b10 ;
1?
1%
#16
12
b11 +
07
18
1'
0%
#17
0,
02
1/
08
b100 +
19
b1000 #
b11 $
0?
b1000 ;
1C
b110100000 (
b11 *
1.
1%
#18
12
16
0/
b1 +
09
0'
0%
#19
1,
02
b10 +
06
17
b1 $
b10 #
b1 *
0.
0C
b10001000 (
b10 ;
1?
1%
#20
0%
#21
12
0,
16
b1 +
07
b1 #
b0 $
1=
b1 ;
0?
b100 (
b0 *
04
1&
#22
06
1,
18
b11 +
1'
0&
#23
0,
02
1/
b100 +
08
19
b11 $
b1000 #
1.
b11 *
14
1C
b110100000 (
b1000 ;
0=
1%
#24
0%
